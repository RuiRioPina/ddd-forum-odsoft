plugins {
    id "com.github.node-gradle.node" version "7.0.0"
}

node {
    version = '12.22.12'
    npmVersion = '6.14.16'
    download = true
}

//Fazer as partes de build dos tests nos Jenkins

task startContainers(type: Exec) {
    commandLine 'docker-compose', 'down'
    commandLine 'docker-compose', 'up', '-d'
}

task createDatabase(type: Exec) {
    dependsOn startContainers

    commandLine 'npm', 'run', 'db:create:dev'
    commandLine 'npm', 'run', 'migrate:dev'
}

task startBackend(type: Exec) {
    dependsOn createDatabase
    commandLine 'npm', 'run', 'start:dev'
}

task runUnitTestsAndGenerateCoverageReport(type: NodeTask) {
    script = file('node_modules/jest/bin/jest.js')
    args = ['--config', 'jest.config.js', '--testPathIgnorePatterns=api', '--testResultsProcessor', './node_modules/jest-junit', '--coverage', '--coverageDirectory=coverage']
}

task runApiTestsAndGenerateCoverageReport(type: NodeTask) {
    dependsOn createDatabase
    script = file('node_modules/jest/bin/jest.js')
    args = ['--coverage', '--coverageReporters=html', '--runInBand', '--testPathPattern=api']
}

task docsGeneration(type: NodeTask) {
    script = file('node_modules/jsdoc/jsdoc.js')
    args = ['-c', 'jsdoc.json']
}

task generatePlantUml(type:Exec) {
    workingDir 'bin/'
    if (System.properties['os.name'].toLowerCase().contains('windows')) {
        commandLine 'cmd', '/c', 'generate-plantuml-diagrams.bat'
    } else {
        commandLine './generate-plantuml-diagrams.sh'
    }
}